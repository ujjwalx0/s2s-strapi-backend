name: Deploy Strapi v5 to Oracle Cloud

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: strapi-app
  OCI_SSH_USER: ubuntu
  DATABASE_CA_FILE: ca.pem

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install TypeScript
        run: npm install typescript --save-dev

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          build-args: |
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare deployment files
        run: |
          # Ensure config directory exists
          mkdir -p config
          
          # Create database.ts with correct path
          cat << 'EOT' > config/database.ts
          import fs from 'fs';
          import path from 'path';
          import type { DatabaseConfig } from '@strapi/strapi';

          export default ({ env }): DatabaseConfig => ({
            connection: {
              client: 'postgres',
              connection: {
                host: env('DATABASE_HOST'),
                port: env.int('DATABASE_PORT'),
                database: env('DATABASE_NAME'),
                user: env('DATABASE_USERNAME'),
                password: env('DATABASE_PASSWORD'),
                ssl: {
                  ca: fs.readFileSync(path.join(__dirname, '../ca.pem')).toString(),
                  rejectUnauthorized: true,
                },
                schema: env('DATABASE_SCHEMA', 'public'),
              },
              pool: {
                min: env.int('DATABASE_POOL_MIN', 2),
                max: env.int('DATABASE_POOL_MAX', 10)
              }
            }
          });
          EOT

      - name: Deploy to Oracle Cloud
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.OCI_PUBLIC_IP }}
          username: ${{ env.OCI_SSH_USER }}
          key: ${{ secrets.OCI_SSH_KEY }}
          script: |
            # Create required directories with proper permissions
            sudo mkdir -p /strapi/{config,uploads,cache}
            sudo chown -R ubuntu:ubuntu /strapi
            
            # Prepare SSL certificate
            echo "${{ secrets.DATABASE_CA_CERT }}" > /tmp/ca.pem
            chmod 644 /tmp/ca.pem
            
            # Create environment file
            cat <<EOT > /home/ubuntu/.env
            DATABASE_CLIENT=postgres
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_SSL=true
            DATABASE_SCHEMA=public
            NODE_ENV=production
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
            APP_KEYS=${{ secrets.APP_KEYS }}
            API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
            TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
            EOT

            # Docker operations
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            # Clean up any existing container
            docker stop strapi || true
            docker rm strapi || true
            
            # Pull and run new container
            docker run -d \
              --name strapi \
              --restart unless-stopped \
              -p 1337:1337 \
              -v /strapi/config:/app/config \
              -v /strapi/uploads:/app/public/uploads \
              -v /strapi/cache:/app/.cache \
              -v /tmp/ca.pem:/app/ca.pem \
              --env-file /home/ubuntu/.env \
              ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest

            # Verify deployment
            echo "Waiting for Strapi to start..."
            sleep 20
            docker logs strapi --tail 50
            
            # Cleanup
            rm -f /home/ubuntu/.env /tmp/ca.pem